package merge_rules

import "class://com.google.cloud.verticals.foundations.dataharmonization.plugins.reconciliation.ReconciliationPlugin"

// Resource-level merge rule for the ServiceRequest resource type.
def ServiceRequestRule() {
  "merge"; // alternatively, "latest"
}

// Per-field merge rules for ServiceRequest resource types.
def ServiceRequestMerge(existing, inbound) {
  identifier: recon::unionByField(existing.identifier, inbound.identifier, "system")

  instantiatesCanonical: recon::union(existing.instantiatesCanonical, inbound.instantiatesCanonical)

  instantiatesUri: recon::union(existing.instantiatesUri, inbound.instantiatesUri)

  basedOn: recon::union(existing.basedOn, inbound.basedOn)

  replaces: recon::union(existing.replaces, inbound.replaces)

  status: recon::forceInbound(existing.status, inbound.status)

  intent: recon::forceInbound(existing.intent, inbound.intent)

  category: recon::union(existing.category, inbound.category)

  priority: recon::preferInbound(existing.priority, inbound.priority)

  doNotPerform: recon::preferInbound(existing.doNotPerform, inbound.doNotPerform)

  code: recon::forceInbound(existing.code, inbound.code)

  orderDetail: recon::union(existing.orderDetail, inbound.orderDetail)

  recon::choiceField(existing, inbound, "preferInbound",
    "quantityQuantity", "quantityRatio", "quantityRange"
  )

  subject: recon::forceInbound(existing.subject, inbound.subject)

  encounter: recon::preferInbound(existing.encounter, inbound.encounter)

  recon::choiceField(existing, inbound, "preferInbound",
    "occurrenceDateTime", "occurrencePeriod", "occurrenceTiming"
  )

  recon::choiceField(existing, inbound, "preferInbound",
    "asNeededBoolean", "asNeededCodeableConcept"
  )

  authoredOn: recon::preferInbound(existing.authoredOn, inbound.authoredOn)

  requester: recon::preferInbound(existing.requester, inbound.requester)

  performerType: recon::preferInbound(existing.performerType, inbound.performerType)

  performer: recon::union(existing.performer, inbound.performer)

  locationCode: recon::union(existing.locationCode, inbound.locationCode)

  locationReference: recon::union(existing.locationReference, inbound.locationReference)

  reasonCode: recon::union(existing.reasonCode, inbound.reasonCode)

  reasonReference: recon::union(existing.reasonReference, inbound.reasonReference)

  insurance: recon::union(existing.insurance, inbound.insurance)

  supportingInfo: recon::union(existing.supportingInfo, inbound.supportingInfo)

  specimen: recon::union(existing.specimen, inbound.specimen)

  bodySite: recon::union(existing.bodySite, inbound.bodySite)

  note: recon::union(existing.note, inbound.note)

  patientInstruction: recon::preferInbound(existing.patientInstruction, inbound.patientInstruction)

  relevantHistory: recon::union(existing.relevantHistory, inbound.relevantHistory)
}