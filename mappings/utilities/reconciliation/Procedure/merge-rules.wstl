package merge_rules

import "class://com.google.cloud.verticals.foundations.dataharmonization.plugins.reconciliation.ReconciliationPlugin"

// Resource-level merge rule for the Procedure resource.
def ProcedureRule() {
  "merge"; // alternatively, "latest"
}

// Per-field merge rules for Procedure resource.
def ProcedureMerge(existing, inbound) {
  identifier: recon::unionByField(existing.identifier, inbound.identifier, "system")

  instantiatesCanonical: recon::union(existing.instantiatesCanonical, inbound.instantiatesCanonical)

  instantiatesUri: recon::union(existing.instantiatesUri, inbound.instantiatesUri)

  basedOn: recon::union(existing.basedOn, inbound.basedOn)

  partOf: recon::union(existing.partOf, inbound.partOf)

  status: recon::forceInbound(existing.status, inbound.status)

  statusReason: recon::preferInbound(existing.statusReason, inbound.statusReason)

  category: recon::preferInbound(existing.category, inbound.category)

  code: recon::forceInbound(existing.code, inbound.code)

  subject: recon::forceInbound(existing.subject, inbound.subject)

  encounter: recon::preferInbound(existing.encounter, inbound.encounter)

  recon::choiceField(existing, inbound, "preferInbound",
    "performedDateTime", "performedPeriod", "performedString",
    "performedAge", "performedRange"
  )

  recorder: recon::preferInbound(existing.recorder, inbound.recorder)

  asserter: recon::preferInbound(existing.asserter, inbound.asserter)

  performer: recon::union(existing.performer, inbound.performer)

  location: recon::preferInbound(existing.location, inbound.location)

  reasonCode: recon::union(existing.reasonCode, inbound.reasonCode)

  reasonReference: recon::union(existing.reasonReference, inbound.reasonReference)

  bodySite: recon::union(existing.bodySite, inbound.bodySite)

  outcome: recon::preferInbound(existing.outcome, inbound.outcome)

  report: recon::union(existing.report, inbound.report)

  complication: recon::union(existing.complication, inbound.complication)

  complicationDetail: recon::union(existing.complicationDetail, inbound.complicationDetail)

  followUp: recon::union(existing.followUp, inbound.followUp)

  note: recon::union(existing.note, inbound.note)

  focalDevice: recon::union(existing.focalDevice, inbound.focalDevice)

  usedReference: recon::union(existing.usedReference, inbound.usedReference)

  usedCode: recon::union(existing.usedCode, inbound.usedCode)
}
