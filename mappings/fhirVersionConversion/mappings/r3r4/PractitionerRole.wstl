package fhir_r3r4

import "../ResourceBase.wstl"

// Description: Maps the common fields in FHIR STU3 and FHIR R4
//
// Argument(s):
//   practitionerRole : FHIR PractitionerRole resource
//
// Output(s):
//   FHIR PractitionerRole Resource
//
def PractitionerRoleBase(practitionerRole) {
  resourcebase::ResourceBase(practitionerRole)
  identifier: practitionerRole.identifier
  period: practitionerRole.period
  code: practitionerRole.code
  specialty: practitionerRole.specialty
  telecom: practitionerRole.telecom
  notAvailable: practitionerRole.notAvailable
  availabilityExceptions: practitionerRole.availabilityExceptions
}

// Description: Converts a FHIR STU3 PractitionerRole resource to FHIR R4 PractitionerRole resource.
//
// Argument(s):
//   practitionerRole : FHIR STU3 PractitionerRole resource https://www.hl7.org/fhir/stu3/practitionerrole.html
//
// Output(s):
//   FHIR R4 PractitionerRole Resource https://www.hl7.org/fhir/r4/practitionerrole.html
//
def R3PractitionerRoleToR4(practitionerRole) {
  PractitionerRoleBase(practitionerRole)
  contained: datatypes::R3ResourceToR4(practitionerRole.contained[])
  endpoint: datatypes::R3ReferenceToR4(practitionerRole.endpoint[])
  healthcareService: datatypes::R3ReferenceToR4(practitionerRole.healthcareService[])
  location: datatypes::R3ReferenceToR4(practitionerRole.location[])
  practitioner: datatypes::R3ReferenceToR4(practitionerRole.practitioner)
  organization: datatypes::R3ReferenceToR4(practitionerRole.organization)
  active: practitionerRole.active
  availableTime: practitionerRole.availableTime
}

// Description: Converts a FHIR R4 PractitionerRole resource to FHIR STU3 PractitionerRole resource.
//
// Argument(s):
//   practitionerRole : FHIR R4 PractitionerRole resource https://www.hl7.org/fhir/r4/practitionerrole.html
//
// Output(s):
//   FHIR STU3 PractitionerRole Resource https://www.hl7.org/fhir/stu3/practitionerrole.html
//
def R4PractitionerRoleToR3(practitionerRole) {
  PractitionerRoleBase(practitionerRole)
  contained: datatypes::R4ResourceToR3(practitionerRole.contained[])
  endpoint: datatypes::R4ReferenceToR3(practitionerRole.endpoint[])
  healthcareService: datatypes::R4ReferenceToR3(practitionerRole.healthcareService[])
  location: datatypes::R4ReferenceToR3(practitionerRole.location[])
  practitioner: datatypes::R4ReferenceToR3(practitionerRole.practitioner)
  organization: datatypes::R4ReferenceToR3(practitionerRole.organization)
  active: practitionerRole.active
  availableTime: practitionerRole.availableTime
}
